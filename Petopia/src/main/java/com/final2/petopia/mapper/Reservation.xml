<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="reservation">
	<!-- [190121] selectScheduleListByIdx_biz select절에 where 조건절 추가 -->
	<select id="selectScheduleListByIdx_biz" parameterType="String" resultType="com.final2.petopia.model.ScheduleVO">
		select schedule_UID, fk_idx_biz, to_char(schedule_date, 'yyyy-mm-dd hh24:mi') as schedule_date, schedule_status, to_char((schedule_date+30/(24*60)), 'yyyy-mm-dd hh24:mi') as endtime
		from schedule
		where schedule_date > sysdate and fk_idx_biz=#{idx_biz}
		order by schedule_date
	</select>
	<select id="selectBizMemberVOByIdx_biz" parameterType="String" resultType="com.final2.petopia.model.Biz_MemberVO">
		select idx as idx_biz, name, phone 
		from member
		where idx=#{idx_biz}
	</select>
	<!-- [190119]  -->
	<!-- #로그인 회원 idx로 펫 리스트 select하기 -->
	<select id="selectPetListByIdx" parameterType="int" resultType="com.final2.petopia.model.PetVO">
		select pet_UID, pet_name, pet_type, pet_birthday, pet_size, pet_weight, pet_gender, pet_neutral, medical_history, allergy, pet_profileimg
		from pet_info
		where fk_idx=#{idx}
	</select>
	<!-- #pet_UID로 펫 1마리의 정보 select하기 -->
	<select id="selectPetOneByPet_UID" parameterType="String" resultType="com.final2.petopia.model.PetVO">
		select pet_UID, pet_name, pet_type, pet_birthday, pet_size, pet_weight, pet_gender, pet_neutral, medical_history, allergy, pet_profileimg
		from pet_info
		where pet_UID=#{pet_UID}
	</select>
	
	<!-- [190120] -->
	<!-- #예약VO로 예약테이블에 insert하기; 결제가 없는 예약 -->
	<insert id="insertReservationByRvo" parameterType="com.final2.petopia.model.ReservationVO">
		insert into reservation(reservation_UID, fk_idx, fk_idx_biz, fk_schedule_UID, fk_pet_UID, bookingdate, reservation_DATE, reservation_status, reservation_type)
		values(seq_reservation_UID.nextval, #{fk_idx}, #{fk_idx_biz}, #{fk_schedule_UID}, #{fk_pet_UID}, default, to_date(#{reservation_DATE}, 'yyyy-mm-dd hh24:mi'), 2, #{reservation_type})
	</insert>
	
	<update id="updateScheduleStatusBySUID" parameterType="String">
		update schedule set schedule_status = 1 where schedule_UID=#{fk_schedule_UID}
	</update>
	
	<select id="selectReservation_Seq" resultType="String">
		select seq_reservation_UID.nextval as seq
		from dual
	</select>
	<!-- #예약VO로 예약테이블에 insert하기; 결제가 있는 예약 -->
	<insert id="insertReservationSurgeryByRvo" parameterType="com.final2.petopia.model.ReservationVO">
		insert into reservation(reservation_UID, fk_idx, fk_idx_biz, fk_schedule_UID, fk_pet_UID, bookingdate, reservation_DATE, reservation_status, reservation_type)
		values(#{reservation_UID}, #{fk_idx}, #{fk_idx_biz}, #{fk_schedule_UID}, #{fk_pet_UID}, default, to_date(#{reservation_DATE}, 'yyyy-mm-dd hh24:mi'), 1, #{reservation_type})
	</insert>
	
	<!-- #회원번호로 예치금 잔액 가져오기 -->
	<select id="selectSumDepositByIdx" parameterType="String" resultType="Integer">
		select nvl(sum(depositcoin), 0) as n
		from deposit
		where fk_idx = #{idx}
	</select>
	<!-- #회원번호로 회원 포인트 가져오기 -->
	<select id="selectPointByIdx" parameterType="String" resultType="Integer">
		select point
		from member
		where idx = #{idx}
	</select>
	
	<resultMap type="HashMap" id="rmap_like_reservationVO">
		<result property="reservation_UID" column="RESERVATION_UID" javaType="String"/>
		<result property="fk_idx" column="FK_IDX" javaType="String"/>
		<result property="fk_idx_biz" column="FK_IDX_BIZ" javaType="String"/>
		<result property="fk_schedule_UID" column="FK_SCHEDULE_UID" javaType="String"/>
		<result property="fk_pet_UID" column="FK_PET_UID" javaType="String"/>
		<result property="bookingdate" column="BOOKINGDATE" javaType="String"/>
		<result property="reservation_DATE" column="RESERVATION_DATE" javaType="String"/>
		<result property="reservation_status" column="RESERVATION_STATUS" javaType="String"/>
		<result property="reservation_type" column="RESERVATION_TYPE" javaType="String"/>
		<result property="biz_name" column="BIZ_NAME" javaType="String"/>
		<result property="phone" column="PHONE" javaType="String"/>
		<result property="postcode" column="POSTCODE" javaType="String"/>
		<result property="addr1" column="ADDR1" javaType="String"/>
		<result property="addr2" column="ADDR2" javaType="String"/>
		<result property="pet_name" column="PET_NAME" javaType="String"/>
		<result property="pet_type" column="PET_TYPE" javaType="String"/>
	</resultMap>
	
	<!-- #예약번호로 회원 예약내역 가져오기 -->
	<select id="selectUserReservationOneByFkRUID" parameterType="String" resultMap="rmap_like_reservationVO">
		select reservation_UID, fk_idx, fk_idx_biz, fk_schedule_UID, fk_pet_UID, to_char(bookingdate, 'yyyy-mm-dd hh24:mi') as bookingdate
		    , to_char(reservation_DATE, 'yyyy-mm-dd hh24:mi') as reservation_DATE, reservation_status, decode(reservation_type, 3, '수술', 'error') as reservation_type
		    , biz_name, phone, postcode, addr1, addr2, pet_name, decode(pet_type, 'dog', '강아지', 'cat', '고양이', 'smallani', '소동물', 'etc', '기타종류') as pet_type
		from reservation join 
		(
		select pet_name, pet_type, biz_name, phone, postcode, addr1, addr2
		from pet_info join
		    (
		    select name as biz_name, phone, postcode, addr1, addr2
		    from member join biz_info
		    on idx = idx_biz
		    where idx_biz=(select fk_idx_biz from reservation where reservation_UID = #{fk_reservation_UID})
		    ) V
		on 1=1
		where pet_UID = (select fk_pet_UID from reservation where reservation_UID = #{fk_reservation_UID})
		) R
		on 1=1
		where reservation_UID = #{fk_reservation_UID}
	</select>
	
	<!-- [190124] 결제테이블 시퀀스 채번하기 -->
	<select id="selectPayment_Seq" resultType="int">
		select seq_payment_UID.nextval as seq
		from dual
	</select>
	<!-- #수술예약 시 예치금결제 후 결제테이블에 insert -->
	<insert id="insertPaymentByPvo" parameterType="com.final2.petopia.model.PaymentVO">
		insert into payment(payment_UID, fk_reservation_UID, payment_total, payment_point, payment_pay, payment_date, payment_status)
		values(#{payment_UID}, #{fk_reservation_UID}, #{payment_total} , #{payment_point}, #{payment_pay}, sysdate, 1)
	</insert>
	<!-- #예치금 잔액에서 결제금액만큼 감한 내용을 예치금 테이블에 insert -->
	<update id="insertDepositMinus" parameterType="HashMap">
		insert into deposit(deposit_UID, fk_idx, depositcoin, deposit_status, deposit_type, deposit_date, fk_payment_UID)
		values(seq_deposit_UID.nextval, #{fk_idx}, #{depositcoin}, 3, 'used', sysdate, #{payment_UID})
	</update>
	<!-- [190125] 포인트 set 변경 -->
	<update id="updatePointMember" parameterType="HashMap">
		update member set point=point+#{point} where idx=#{fk_idx}
	</update>
	<!-- #결제완료후 예약테이블의 예약상태 변경하기 -->
	<update id="updateReservationStatusByFkRUID" parameterType="String">
		update reservation set reservation_status = 2 where reservation_UID=#{fk_reservation_UID}
	</update>
	
	
	<select id="getTotalCountNoSearch" parameterType="int" resultType="int">
		select count(*) as cnt
		from reservation
		where fk_idx = #{idx}
	</select>
	
	<select id="selectUserReservationList" parameterType="HashMap" resultMap="rmap_like_reservationVO">
		select rno, reservation_UID, fk_idx, fk_idx_biz, fk_schedule_UID, fk_pet_UID, bookingdate
			, reservation_DATE, reservation_status, reservation_type
			, biz_name, phone, postcode, addr1, addr2, pet_name, pet_type
		from
		(
		select rownum as rno, reservation_UID, fk_idx, fk_idx_biz, fk_schedule_UID, fk_pet_UID, bookingdate
			, reservation_DATE, reservation_status, reservation_type
			, biz_name, phone, postcode, addr1, addr2, pet_name, pet_type
		from
			(
			select A.reservation_UID, A.fk_idx, A.fk_idx_biz, A.fk_schedule_UID, A.fk_pet_UID, to_char(A.bookingdate, 'yyyy-mm-dd hh24:mi') as bookingdate
						, to_char(A.reservation_DATE, 'yyyy-mm-dd hh24:mi') as reservation_DATE, reservation_status, decode(A.reservation_type, 1, '외래진료', 2, '예방접종', 3, '수술상담', 4, '호텔링') as reservation_type
						, B.biz_name, B.phone, B.postcode, B.addr1, B.addr2, C.pet_name, decode(C.pet_type, 'dog', '강아지', 'cat', '고양이', 'smallani', '소동물', 'etc', '기타종류') as pet_type
			from reservation A join view_biz_memberinfo B
			on A.fk_idx_biz = B.idx_biz
			join pet_info C
			on A.fk_pet_UID = C.pet_UID
			where A.fk_idx = #{idx}
			order by A.reservation_UID desc
			)
		)
		where rno between #{startRno} and #{endRno}
	</select>
	
	<!-- [190125] 예치금 히스토리 목록에서 모두보기 -->
	<select id="selectDepositListByIdxNoneType" parameterType="HashMap" resultType="com.final2.petopia.model.DepositVO">
		select rno, deposit_UID, fk_idx, depositcoin, deposit_status, deposit_type, deposit_date, fk_payment_UID
		from
		(
		select rownum as rno, deposit_UID, fk_idx, depositcoin, deposit_status, deposit_type, deposit_date, fk_payment_UID
		from
			(
			select deposit_UID, fk_idx, depositcoin, deposit_status, deposit_type, to_char(deposit_date, 'yyyy-mm-dd hh24:mi') as deposit_date, fk_payment_UID
			from deposit
			where fk_idx = #{idx} and depositcoin != 0
			order by deposit_UID desc
			)
		)
		where rno between #{rno1} and #{rno2}
	</select>
	
	<!-- [190126] 예치금 히스토리 목록에서 충전/사용목록 보기 -->
	<select id="selectDepositListByIdx" parameterType="HashMap" resultType="com.final2.petopia.model.DepositVO">
		select rno, deposit_UID, fk_idx, depositcoin, deposit_status, deposit_type, deposit_date, fk_payment_UID
		from
		(
		select rownum as rno, deposit_UID, fk_idx, depositcoin, deposit_status, deposit_type, deposit_date, fk_payment_UID
		from
			(
			select deposit_UID, fk_idx, depositcoin, deposit_status, deposit_type, to_char(deposit_date, 'yyyy-mm-dd hh24:mi') as deposit_date, fk_payment_UID
			from deposit
			where fk_idx = #{idx} and deposit_status = #{type} and depositcoin != 0
			order by deposit_UID desc
			)
		)
		where rno between #{rno1} and #{rno2}
	</select>
	<!-- [190126] 예치금 히스토리 목록; 모든 건수 -->
	<select id="selectDepositListTotalCountNoneType" parameterType="HashMap" resultType="int">
		select count(*) from deposit where fk_idx=#{idx} and depositcoin != 0
	</select>
	<!-- [190126] 예치금 히스토리 목록; 충전/사용건수 -->
	<select id="selectDepositListTotalCount" parameterType="HashMap" resultType="int">
		select count(*) from deposit where fk_idx=#{idx} and deposit_status=#{type} and depositcoin != 0
	</select>
	<!-- [190126] 최초 스케줄 생성 프로시저 -->
	<insert id="insertScheduleFirst" statementType="CALLABLE" parameterType="String">
		{call PCD_FIRSTADDSCHEDULE(#{idx_biz, mode=IN})}
	</insert>
	<!-- [190126] 병원회원의 스케줄 개수 가져오기 -->
	<select id="selectScheduleCountByIdx_biz" parameterType="String" resultType="int">
		select count(*) from schedule where fk_idx_biz = ${idx_biz}
	</select>
</mapper>